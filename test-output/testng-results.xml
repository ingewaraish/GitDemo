<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="3" total="13" passed="9" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-04-18T17:35:59 IST" name="Loan Department" finished-at="2023-04-18T17:36:00 IST" duration-ms="48">
    <groups>
      <group name="Smoke">
        <method signature="testPractice2.ploan()[pri:0, instance:test.testPractice2@2e1d27ba]" name="ploan" class="test.testPractice2"/>
        <method signature="testPractice4.mobileLoginHomeLoan()[pri:0, instance:test.testPractice4@524d6d96]" name="mobileLoginHomeLoan" class="test.testPractice4"/>
        <method signature="testPractice3.mobileLoginCarLoan()[pri:0, instance:test.testPractice3@51dcb805]" name="mobileLoginCarLoan" class="test.testPractice3"/>
      </group> <!-- Smoke -->
    </groups>
    <test started-at="2023-04-18T17:35:59 IST" name="Car Loan" finished-at="2023-04-18T17:36:00 IST" duration-ms="47">
      <class name="test.testPractice">
        <test-method is-config="true" signature="afSuite()[pri:0, instance:test.testPractice@2525ff7e]" started-at="2023-04-18T17:36:00 IST" name="afSuite" finished-at="2023-04-18T17:36:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afSuite -->
      </class> <!-- test.testPractice -->
      <class name="test.testPractice3">
        <test-method is-config="true" signature="bfSuite()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:35:59 IST" name="bfSuite" finished-at="2023-04-18T17:35:59 IST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bfSuite -->
        <test-method is-config="true" signature="bfClass()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:35:59 IST" name="bfClass" finished-at="2023-04-18T17:35:59 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bfClass -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:35:59 IST" name="beforeEvery" finished-at="2023-04-18T17:35:59 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method signature="mobileLoginCarLoan()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:35:59 IST" name="mobileLoginCarLoan" finished-at="2023-04-18T17:35:59 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobileLoginCarLoan -->
        <test-method is-config="true" signature="afterEvery()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:35:59 IST" name="afterEvery" finished-at="2023-04-18T17:35:59 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEvery -->
        <test-method signature="mobileSignoutLoan(java.lang.String, java.lang.String)[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="mobileSignoutLoan" data-provider="getData" finished-at="2023-04-18T17:36:00 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[firstpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobileSignoutLoan -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="beforeEvery" finished-at="2023-04-18T17:36:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method is-config="true" signature="afterEvery()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="afterEvery" finished-at="2023-04-18T17:36:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEvery -->
        <test-method signature="mobileSignoutLoan(java.lang.String, java.lang.String)[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="mobileSignoutLoan" data-provider="getData" finished-at="2023-04-18T17:36:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[secondusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[secondpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobileSignoutLoan -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="beforeEvery" finished-at="2023-04-18T17:36:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="beforeEvery" finished-at="2023-04-18T17:36:00 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method is-config="true" signature="afterEvery()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="afterEvery" finished-at="2023-04-18T17:36:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEvery -->
        <test-method signature="mobileSignoutLoan(java.lang.String, java.lang.String)[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="mobileSignoutLoan" data-provider="getData" finished-at="2023-04-18T17:36:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[thirdusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[thirdpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobileSignoutLoan -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="beforeEvery" finished-at="2023-04-18T17:36:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method is-config="true" signature="afterEvery()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="afterEvery" finished-at="2023-04-18T17:36:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEvery -->
        <test-method signature="webLoginCarLoan(java.lang.String, java.lang.String)[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="webLoginCarLoan" finished-at="2023-04-18T17:36:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[carLoan.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123456]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- webLoginCarLoan -->
        <test-method is-config="true" signature="afterEvery()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="afterEvery" finished-at="2023-04-18T17:36:00 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEvery -->
        <test-method is-config="true" signature="afClass()[pri:0, instance:test.testPractice3@51dcb805]" started-at="2023-04-18T17:36:00 IST" name="afClass" finished-at="2023-04-18T17:36:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afClass -->
      </class> <!-- test.testPractice3 -->
    </test> <!-- Car Loan -->
    <test started-at="2023-04-18T17:35:59 IST" name="Personal Loan" finished-at="2023-04-18T17:36:00 IST" duration-ms="48">
      <class name="test.testPractice">
        <test-method signature="Demo()[pri:0, instance:test.testPractice@2525ff7e]" started-at="2023-04-18T17:35:59 IST" name="Demo" finished-at="2023-04-18T17:35:59 IST" duration-ms="7" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at test.testPractice.Demo(testPractice.java:27)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:425)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:66)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Demo -->
        <test-method is-config="true" signature="lastExecution()[pri:0, instance:test.testPractice@2525ff7e]" started-at="2023-04-18T17:36:00 IST" name="lastExecution" finished-at="2023-04-18T17:36:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lastExecution -->
      </class> <!-- test.testPractice -->
      <class name="test.testPractice2">
        <test-method is-config="true" signature="prerequisite()[pri:0, instance:test.testPractice2@2e1d27ba]" started-at="2023-04-18T17:35:59 IST" name="prerequisite" finished-at="2023-04-18T17:35:59 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prerequisite -->
        <test-method signature="ploan()[pri:0, instance:test.testPractice2@2e1d27ba]" started-at="2023-04-18T17:36:00 IST" name="ploan" finished-at="2023-04-18T17:36:00 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ploan -->
      </class> <!-- test.testPractice2 -->
      <class name="test.testPractice4">
        <test-method signature="apiLoginHomeLoan()[pri:0, instance:test.testPractice4@524d6d96]" started-at="2023-04-18T17:36:00 IST" name="apiLoginHomeLoan" finished-at="2023-04-18T17:36:00 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- apiLoginHomeLoan -->
        <test-method signature="mobileLoginHomeLoan()[pri:0, instance:test.testPractice4@524d6d96]" started-at="2023-04-18T17:36:00 IST" name="mobileLoginHomeLoan" finished-at="2023-04-18T17:36:00 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobileLoginHomeLoan -->
        <test-method signature="webLoginHomeLoan(java.lang.String)[pri:0, instance:test.testPractice4@524d6d96]" started-at="2023-04-18T17:36:00 IST" name="webLoginHomeLoan" finished-at="2023-04-18T17:36:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[personalLoan.com]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- webLoginHomeLoan -->
      </class> <!-- test.testPractice4 -->
    </test> <!-- Personal Loan -->
  </suite> <!-- Loan Department -->
</testng-results>
